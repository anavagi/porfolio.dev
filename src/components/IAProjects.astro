---
import GitHub from "./icons/GitHub.astro"
import LinkButton from "./LinkButton.astro"
import Laravel from "./icons/Laravel.astro"
import Php from "./icons/Php.astro"
import Python from "./icons/Python.astro"
import C from "./icons/C.astro"

const TAGS = {
  PHP: {
    class: "text-white",
    icon: Php,
  },
  LARAVEL: {
    name: "Laravel",
    class: "text-black",
    icon: Laravel,
  },
  PYTHON: {
    name: "Python",
    class: "text-black",
    icon: Python,
  },
  C: {
    name: "C#",
    class: "text-black",
    icon: C,
  },
}
const FIELDS = {
  BACKEND: {
    name: "Backend",
    class: "bg-green-200 text-black",
  },
  FRONTEND: {
    name: "Frontend",
    class: "bg-green-200 text-black",
  },
  AWS: {
    name: "AWS",
    class: "bg-green-200 text-black",
  },
  Algoritmos: {
    name: "Algoritmos",
    class: "bg-green-200 text-black",
  },
}
const PROJECTS = [
{
    title: "Labeling with python - Artificial Intelligence university practice",
    description:
      "Implemented KMeans and KNN algorithms to solve image labeling based on colors and shapes, identifying +10 coloras and +8 shape labels. Test and analyses highlighted qualitative and quantitative results, along with improvements to both algorithms."
      ,
    github: "https://github.com/anavagi/PR2_Etiquetatge",
    date: "2n year Compunter Engineering - 2022",
    image: "/projects/iaproject.png",
    tags: [TAGS.PYTHON],
    fields: [FIELDS.Algoritmos],
  },
  {
    title: "Graphs with C++ - Artificial Intelligence university practice",
    description:
      "This project focuses on the management and processing of geospatial data through key functions. BallTree handles trees and coordinates, while MapaRender focuses on rendering elements and routes. Classes like Util and XML4OSMUtil process geographic and XML data, complemented by MapaBase, which manages points of interest and shortes paths."
      ,
    github: "https://github.com/anavagi/lp-practica",
    date: "2n year Compunter Engineering - 2022",
    image: "/projects/projectsetiquetatge.png",
    tags: [TAGS.C],
    fields: [FIELDS.Algoritmos],
  },
]
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, github, fields }) => (
    <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
  <div class="w-full md:w-1/2">
    <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:hover:bg-gray-800/50">
      <img alt="Recién llegado vs 5 años en Nueva Zelanda" class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" loading="lazy" src={image} />
    </div>
  </div>

  <div class="w-full md:w-1/2 md:max-w-lg">
    <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
      {title}
    </h3>
    <div class="flex flex-wrap mt-2">
      <div>
  <ul class="flex flex-row mb-2 gap-x-2">
    {tags.map((tag) => (
      <li>
        <span
          class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}
        >
          <tag.icon class="size-4" />
          {tag.name}
        </span>
      </li>
    ))}
  </ul>
  
  <ul class="flex flex-row mt-2 mb-2 gap-x-2">
    {fields.map((field) => (
      <li>
        <span
          class={`flex gap-x-2 rounded-full text-xs ${field.class} py-1 px-2`}
        >
          {field.name}
        </span>
      </li>
    ))}
  </ul>
</div>

      <div class="mt-2 text-gray-700 dark:text-gray-400">{description}</div>
      <footer class="flex items-end justify-start mt-4 gap-x-4">
          {github && (
            <LinkButton href={github}>
              <GitHub class="size-6" />
              Code
              
            </LinkButton>
          )}
        </footer>
    </div>
  </div>
</article>
    ))
  }
</div>




